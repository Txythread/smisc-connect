// Stupid Text Code

pub enum STCValue {
    // 0 1 2 3 4 5 6 7 8 9
    Zero,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,

    // A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
    UppercaseA,
    UppercaseB,
    UppercaseC,
    UppercaseD,
    UppercaseE,
    UppercaseF,
    UppercaseG,
    UppercaseH,
    UppercaseI,
    UppercaseJ,
    UppercaseK,
    UppercaseL,
    UppercaseM,
    UppercaseN,
    UppercaseO,
    UppercaseP,
    UppercaseQ,
    UppercaseR,
    UppercaseS,
    UppercaseT,
    UppercaseU,
    UppercaseV,
    UppercaseW,
    UppercaseX,
    UppercaseY,
    UppercaseZ,

    // a b c d e f g h i j k l m n o p q r s t u v w x y z
    LowercaseA,
    LowercaseB,
    LowercaseC,
    LowercaseD,
    LowercaseE,
    LowercaseF,
    LowercaseG,
    LowercaseH,
    LowercaseI,
    LowercaseJ,
    LowercaseK,
    LowercaseL,
    LowercaseM,
    LowercaseN,
    LowercaseO,
    LowercaseP,
    LowercaseQ,
    LowercaseR,
    LowercaseS,
    LowercaseT,
    LowercaseU,
    LowercaseV,
    LowercaseW,
    LowercaseX,
    LowercaseY,
    LowercaseZ,

    // ? ! . : ; , / + - * - _ #
    QuestionMark,
    ExclamationMark,
    Period,
    Colon,
    Semicolon,
    Comma,
    Slash,
    Plus,
    Minus,
    Asterisk,
    Dash,
    Underscore,
    Hashtag,

    // () [] <> {}
    ParenthesesRoundOpen,
    ParenthesesRoundClose,
    ParenthesesSquareOpen,
    ParenthesesSquareClose,
    ParenthesesPointyOpen,
    ParenthesesPointyClose,
    ParenthesesCurlyOpen,
    ParenthesesCurlyClose,

    // Invisible Characters
    Newline,
    Remove,
    Tab,
    Modifier0,
    Modifier1,
    Modifier2,
    Space,

    // Mode-setting command
    StandardOutput,
    StandardInput,
    Formatting,
    Data,
    // Reserve 6 more of them
}

impl STCValue {
    pub fn to_ascii(&self) -> Option<char> {
        match self {
            STCValue::Zero => Some('0'),
            STCValue::One => Some('1'),
            STCValue::Two => Some('2'),
            STCValue::Three => Some('3'),
            STCValue::Four => Some('4'),
            STCValue::Five => Some('5'),
            STCValue::Six => Some('6'),
            STCValue::Seven => Some('7'),
            STCValue::Eight => Some('8'),
            STCValue::Nine => Some('9'),
            STCValue::UppercaseA => Some('A'),
            STCValue::UppercaseB => Some('B'),
            STCValue::UppercaseC => Some('C'),
            STCValue::UppercaseD => Some('D'),
            STCValue::UppercaseE => Some('E'),
            STCValue::UppercaseF => Some('F'),
            STCValue::UppercaseG => Some('G'),
            STCValue::UppercaseH => Some('H'),
            STCValue::UppercaseI => Some('I'),
            STCValue::UppercaseJ => Some('J'),
            STCValue::UppercaseK => Some('K'),
            STCValue::UppercaseL => Some('L'),
            STCValue::UppercaseM => Some('M'),
            STCValue::UppercaseN => Some('N'),
            STCValue::UppercaseO => Some('O'),
            STCValue::UppercaseP => Some('P'),
            STCValue::UppercaseQ => Some('Q'),
            STCValue::UppercaseR => Some('R'),
            STCValue::UppercaseS => Some('S'),
            STCValue::UppercaseT => Some('T'),
            STCValue::UppercaseU => Some('U'),
            STCValue::UppercaseV => Some('V'),
            STCValue::UppercaseW => Some('W'),
            STCValue::UppercaseX => Some('X'),
            STCValue::UppercaseY => Some('Y'),
            STCValue::UppercaseZ => Some('Z'),
            STCValue::LowercaseA => Some('a'),
            STCValue::LowercaseB => Some('b'),
            STCValue::LowercaseC => Some('c'),
            STCValue::LowercaseD => Some('d'),
            STCValue::LowercaseE => Some('e'),
            STCValue::LowercaseF => Some('f'),
            STCValue::LowercaseG => Some('g'),
            STCValue::LowercaseH => Some('h'),
            STCValue::LowercaseI => Some('i'),
            STCValue::LowercaseJ => Some('j'),
            STCValue::LowercaseK => Some('k'),
            STCValue::LowercaseL => Some('l'),
            STCValue::LowercaseM => Some('m'),
            STCValue::LowercaseN => Some('n'),
            STCValue::LowercaseO => Some('o'),
            STCValue::LowercaseP => Some('p'),
            STCValue::LowercaseQ => Some('q'),
            STCValue::LowercaseR => Some('r'),
            STCValue::LowercaseS => Some('s'),
            STCValue::LowercaseT => Some('t'),
            STCValue::LowercaseU => Some('u'),
            STCValue::LowercaseV => Some('v'),
            STCValue::LowercaseW => Some('w'),
            STCValue::LowercaseX => Some('x'),
            STCValue::LowercaseY => Some('y'),
            STCValue::LowercaseZ => Some('z'),

            STCValue::QuestionMark => Some('?'),
            STCValue::ExclamationMark => Some('!'),
            STCValue::Period => Some('.'),
            STCValue::Colon => Some(':'),
            STCValue::Semicolon => Some(';'),
            STCValue::Comma => Some(','),
            STCValue::Slash => Some('/'),
            STCValue::Plus => Some('+'),
            STCValue::Minus => Some('-'),
            STCValue::Asterisk => Some('*'),
            STCValue::Dash => Some('-'),
            STCValue::Underscore => Some('_'),
            STCValue::Hashtag => Some('#'),

            STCValue::ParenthesesRoundOpen => Some('('),
            STCValue::ParenthesesRoundClose => Some(')'),
            STCValue::ParenthesesSquareOpen => Some('['),
            STCValue::ParenthesesSquareClose => Some(']'),
            STCValue::ParenthesesPointyOpen => Some('<'),
            STCValue::ParenthesesPointyClose => Some('>'),
            STCValue::ParenthesesCurlyOpen => Some('{'),
            STCValue::ParenthesesCurlyClose => Some('}'),

            STCValue::Newline => Some('\n'),
            STCValue::Tab => Some('\t'),
            STCValue::Space => Some(' '),

            _ => None,
        }
    }

    pub fn from_ascii(value: char) -> Option<Self> {
        match value {
            '0' => Some(STCValue::Zero),
            '1' => Some(STCValue::One),
            '2' => Some(STCValue::Two),
            '3' => Some(STCValue::Three),
            '4' => Some(STCValue::Four),
            '5' => Some(STCValue::Five),
            '6' => Some(STCValue::Six),
            '7' => Some(STCValue::Seven),
            '8' => Some(STCValue::Eight),
            '9' => Some(STCValue::Nine),

            'A' => Some(STCValue::UppercaseA),
            'B' => Some(STCValue::UppercaseB),
            'C' => Some(STCValue::UppercaseC),
            'D' => Some(STCValue::UppercaseD),
            'E' => Some(STCValue::UppercaseE),
            'F' => Some(STCValue::UppercaseF),
            'G' => Some(STCValue::UppercaseG),
            'H' => Some(STCValue::UppercaseH),
            'I' => Some(STCValue::UppercaseI),
            'J' => Some(STCValue::UppercaseJ),
            'K' => Some(STCValue::UppercaseK),
            'L' => Some(STCValue::UppercaseL),
            'M' => Some(STCValue::UppercaseM),
            'N' => Some(STCValue::UppercaseN),
            'O' => Some(STCValue::UppercaseO),
            'P' => Some(STCValue::UppercaseP),
            'Q' => Some(STCValue::UppercaseQ),
            'R' => Some(STCValue::UppercaseR),
            'S' => Some(STCValue::UppercaseS),
            'T' => Some(STCValue::UppercaseT),
            'U' => Some(STCValue::UppercaseU),
            'V' => Some(STCValue::UppercaseV),
            'W' => Some(STCValue::UppercaseW),
            'X' => Some(STCValue::UppercaseX),
            'Y' => Some(STCValue::UppercaseY),
            'Z' => Some(STCValue::UppercaseZ),

            'a' => Some(STCValue::LowercaseA),
            'b' => Some(STCValue::LowercaseB),
            'c' => Some(STCValue::LowercaseC),
            'd' => Some(STCValue::LowercaseD),
            'e' => Some(STCValue::LowercaseE),
            'f' => Some(STCValue::LowercaseF),
            'g' => Some(STCValue::LowercaseG),
            'h' => Some(STCValue::LowercaseH),
            'i' => Some(STCValue::LowercaseI),
            'j' => Some(STCValue::LowercaseJ),
            'k' => Some(STCValue::LowercaseK),
            'l' => Some(STCValue::LowercaseL),
            'm' => Some(STCValue::LowercaseM),
            'n' => Some(STCValue::LowercaseN),
            'o' => Some(STCValue::LowercaseO),
            'p' => Some(STCValue::LowercaseP),
            'q' => Some(STCValue::LowercaseQ),
            'r' => Some(STCValue::LowercaseR),
            's' => Some(STCValue::LowercaseS),
            't' => Some(STCValue::LowercaseT),
            'u' => Some(STCValue::LowercaseU),
            'v' => Some(STCValue::LowercaseV),
            'w' => Some(STCValue::LowercaseW),
            'x' => Some(STCValue::LowercaseX),
            'y' => Some(STCValue::LowercaseY),
            'z' => Some(STCValue::LowercaseZ),

            '\n' => Some(STCValue::Newline),
            '\t' => Some(STCValue::Tab),
            ' ' => Some(STCValue::Space),

            _ => None,
        }
    }

    pub fn get_value(&self) -> u8 {
        match self {
            STCValue::Zero =>       0b1000_0000,
            STCValue::One =>        0b1000_0001,
            STCValue::Two =>        0b1000_0010,
            STCValue::Three =>      0b1000_0011,
            STCValue::Four =>       0b1000_0100,
            STCValue::Five =>       0b1000_0101,
            STCValue::Six =>        0b1000_0110,
            STCValue::Seven =>      0b1000_0111,
            STCValue::Eight =>      0b1000_1000,
            STCValue::Nine =>       0b1000_1001,

            STCValue::UppercaseA => 0b1000_1010,
            STCValue::UppercaseB => 0b1000_1011,
            STCValue::UppercaseC => 0b1000_1100,
            STCValue::UppercaseD => 0b1000_1101,
            STCValue::UppercaseE => 0b1000_1110,
            STCValue::UppercaseF => 0b1000_1111,
            STCValue::UppercaseG => 0b1001_0000,
            STCValue::UppercaseH => 0b1001_0001,
            STCValue::UppercaseI => 0b1001_0010,
            STCValue::UppercaseJ => 0b1001_0011,
            STCValue::UppercaseK => 0b1001_0100,
            STCValue::UppercaseL => 0b1001_0101,
            STCValue::UppercaseM => 0b1001_0110,
            STCValue::UppercaseN => 0b1001_0111,
            STCValue::UppercaseO => 0b1001_1000,
            STCValue::UppercaseP => 0b1001_1001,
            STCValue::UppercaseQ => 0b1001_1010,
            STCValue::UppercaseR => 0b1001_1011,
            STCValue::UppercaseS => 0b1001_1100,
            STCValue::UppercaseT => 0b1001_1101,
            STCValue::UppercaseU => 0b1001_1110,
            STCValue::UppercaseV => 0b1001_1111,
            STCValue::UppercaseW => 0b1010_0000,
            STCValue::UppercaseX => 0b1010_0001,
            STCValue::UppercaseY => 0b1010_0010,
            STCValue::UppercaseZ => 0b1010_0011,

            STCValue::LowercaseA => 0b1010_0100,
            STCValue::LowercaseB => 0b1010_0101,
            STCValue::LowercaseC => 0b1010_0110,
            STCValue::LowercaseD => 0b1010_0111,
            STCValue::LowercaseE => 0b1010_1000,
            STCValue::LowercaseF => 0b1010_1001,
            STCValue::LowercaseG => 0b1010_1010,
            STCValue::LowercaseH => 0b1010_1011,
            STCValue::LowercaseI => 0b1010_1100,
            STCValue::LowercaseJ => 0b1010_1101,
            STCValue::LowercaseK => 0b1010_1110,
            STCValue::LowercaseL => 0b1010_1111,
            STCValue::LowercaseM => 0b1011_0000,
            STCValue::LowercaseN => 0b1011_0001,
            STCValue::LowercaseO => 0b1011_0010,
            STCValue::LowercaseP => 0b1011_0011,
            STCValue::LowercaseQ => 0b1011_0100,
            STCValue::LowercaseR => 0b1011_0101,
            STCValue::LowercaseS => 0b1011_0110,
            STCValue::LowercaseT => 0b1011_0111,
            STCValue::LowercaseU => 0b1011_1000,
            STCValue::LowercaseV => 0b1011_1001,
            STCValue::LowercaseW => 0b1011_1010,
            STCValue::LowercaseX => 0b1011_1011,
            STCValue::LowercaseY => 0b1011_1100,
            STCValue::LowercaseZ => 0b1011_1110,

            STCValue::QuestionMark =>           0b1011_1111,
            STCValue::ExclamationMark =>        0b1100_0000,
            STCValue::Period =>                 0b1100_0001,
            STCValue::Colon =>                  0b1100_0010,
            STCValue::Semicolon =>              0b1100_0011,
            STCValue::Comma =>                  0b1100_0100,
            STCValue::Slash =>                  0b1100_0101,
            STCValue::Plus =>                   0b1100_0110,
            STCValue::Minus =>                  0b1100_0111,
            STCValue::Asterisk =>               0b1100_1000,
            STCValue::Dash =>                   0b1100_1001,
            STCValue::Underscore =>             0b1100_1010,
            STCValue::Hashtag =>                0b1100_1011,
            // Reserve up to (excluding) 0b1110_0000

            STCValue::ParenthesesRoundOpen =>   0b1110_0000,
            STCValue::ParenthesesRoundClose =>  0b1110_0001,
            STCValue::ParenthesesSquareOpen =>  0b1110_0010,
            STCValue::ParenthesesSquareClose => 0b1110_0011,
            STCValue::ParenthesesPointyOpen =>  0b1110_0100,
            STCValue::ParenthesesPointyClose => 0b1110_0101,
            STCValue::ParenthesesCurlyOpen =>   0b1110_0110,
            STCValue::ParenthesesCurlyClose =>  0b1110_0111,

            STCValue::Newline =>                0b1110_1000,
            STCValue::Remove =>                 0b1110_1001,
            STCValue::Tab =>                    0b1110_1010,
            STCValue::Modifier0 =>              0b1111_0011,
            STCValue::Modifier1 =>              0b1110_1011,
            STCValue::Modifier2 =>              0b1110_1100,
            STCValue::Space =>                  0b1110_1110,

            STCValue::StandardOutput =>         0b1110_1111,
            STCValue::StandardInput =>          0b1111_0000,
            STCValue::Formatting =>             0b1111_0001,
            STCValue::Data =>                   0b1111_0010,
            // 1111_0011 reserved for modifier 0
        }
    }

    pub fn from_value(val: u8) -> Option<Self> {
        match val {
            0b1000_0000 => Some(STCValue::Zero),
            0b1000_0001 => Some(STCValue::One),
            0b1000_0010 => Some(STCValue::Two),
            0b1000_0011 => Some(STCValue::Three),
            0b1000_0100 => Some(STCValue::Four),
            0b1000_0101 => Some(STCValue::Five),
            0b1000_0110 => Some(STCValue::Six),
            0b1000_0111 => Some(STCValue::Seven),
            0b1000_1000 => Some(STCValue::Eight),
            0b1000_1001 => Some(STCValue::Nine),

            0b1000_1010 => Some(STCValue::UppercaseA),
            0b1000_1011 => Some(STCValue::UppercaseB),
            0b1000_1100 => Some(STCValue::UppercaseC),
            0b1000_1101 => Some(STCValue::UppercaseD),
            0b1000_1110 => Some(STCValue::UppercaseE),
            0b1000_1111 => Some(STCValue::UppercaseF),
            0b1001_0000 => Some(STCValue::UppercaseG),
            0b1001_0001 => Some(STCValue::UppercaseH),
            0b1001_0010 => Some(STCValue::UppercaseI),
            0b1001_0011 => Some(STCValue::UppercaseJ),
            0b1001_0100 => Some(STCValue::UppercaseK),
            0b1001_0101 => Some(STCValue::UppercaseL),
            0b1001_0110 => Some(STCValue::UppercaseM),
            0b1001_0111 => Some(STCValue::UppercaseN),
            0b1001_1000 => Some(STCValue::UppercaseO),
            0b1001_1001 => Some(STCValue::UppercaseP),
            0b1001_1010 => Some(STCValue::UppercaseQ),
            0b1001_1011 => Some(STCValue::UppercaseR),
            0b1001_1100 => Some(STCValue::UppercaseS),
            0b1001_1101 => Some(STCValue::UppercaseT),
            0b1001_1110 => Some(STCValue::UppercaseU),
            0b1001_1111 => Some(STCValue::UppercaseV),
            0b1010_0000 => Some(STCValue::UppercaseW),
            0b1010_0001 => Some(STCValue::UppercaseX),
            0b1010_0010 => Some(STCValue::UppercaseY),
            0b1010_0011 => Some(STCValue::UppercaseZ),

            0b1010_0100 => Some(STCValue::LowercaseA),
            0b1010_0101 => Some(STCValue::LowercaseB),
            0b1010_0110 => Some(STCValue::LowercaseC),
            0b1010_0111 => Some(STCValue::LowercaseD),
            0b1010_1000 => Some(STCValue::LowercaseE),
            0b1010_1001 => Some(STCValue::LowercaseF),
            0b1010_1010 => Some(STCValue::LowercaseG),
            0b1010_1011 => Some(STCValue::LowercaseH),
            0b1010_1100 => Some(STCValue::LowercaseI),
            0b1010_1101 => Some(STCValue::LowercaseJ),
            0b1010_1110 => Some(STCValue::LowercaseK),
            0b1010_1111 => Some(STCValue::LowercaseL),
            0b1011_0000 => Some(STCValue::LowercaseM),
            0b1011_0001 => Some(STCValue::LowercaseN),
            0b1011_0010 => Some(STCValue::LowercaseO),
            0b1011_0011 => Some(STCValue::LowercaseP),
            0b1011_0100 => Some(STCValue::LowercaseQ),
            0b1011_0101 => Some(STCValue::LowercaseR),
            0b1011_0110 => Some(STCValue::LowercaseS),
            0b1011_0111 => Some(STCValue::LowercaseT),
            0b1011_1000 => Some(STCValue::LowercaseU),
            0b1011_1001 => Some(STCValue::LowercaseV),
            0b1011_1010 => Some(STCValue::LowercaseW),
            0b1011_1011 => Some(STCValue::LowercaseX),
            0b1011_1100 => Some(STCValue::LowercaseY),
            0b1011_1110 => Some(STCValue::LowercaseZ),

            0b1011_1111 => Some(STCValue::QuestionMark),
            0b1100_0000 => Some(STCValue::ExclamationMark),
            0b1100_0001 => Some(STCValue::Period),
            0b1100_0010 => Some(STCValue::Colon),
            0b1100_0011 => Some(STCValue::Semicolon),
            0b1100_0100 => Some(STCValue::Comma),
            0b1100_0101 => Some(STCValue::Slash),
            0b1100_0110 => Some(STCValue::Plus),
            0b1100_0111 => Some(STCValue::Minus),
            0b1100_1000 => Some(STCValue::Asterisk),
            0b1100_1001 => Some(STCValue::Dash),
            0b1100_1010 => Some(STCValue::Underscore),
            0b1100_1011 => Some(STCValue::Hashtag),

            0b1110_0000 => Some(STCValue::ParenthesesRoundOpen),
            0b1110_0001 => Some(STCValue::ParenthesesRoundClose),
            0b1110_0010 => Some(STCValue::ParenthesesSquareOpen),
            0b1110_0011 => Some(STCValue::ParenthesesSquareClose),
            0b1110_0100 => Some(STCValue::ParenthesesPointyOpen),
            0b1110_0101 => Some(STCValue::ParenthesesPointyClose),
            0b1110_0110 => Some(STCValue::ParenthesesCurlyOpen),
            0b1110_0111 => Some(STCValue::ParenthesesCurlyClose),

            /*STCValue::StandardOutput =>         0b1110_1111,
            STCValue::Data =>                   0b1111_0010,*/
            0b1110_1000 => Some(STCValue::Newline),
            0b1110_1001 => Some(STCValue::Remove),
            0b1110_1010 => Some(STCValue::Tab),
            0b1111_0011 => Some(STCValue::Modifier0),
            0b1110_1011 => Some(STCValue::Modifier1),
            0b1110_1100 => Some(STCValue::Modifier2),
            0b1110_1110 => Some(STCValue::Space),
            0b1110_1111 => Some(STCValue::StandardOutput),
            0b1111_0000 => Some(STCValue::StandardInput),
            0b1111_0001 => Some(STCValue::Formatting),
            0b1111_0010 => Some(STCValue::Data),

            _ => None,
        }
    }
}


